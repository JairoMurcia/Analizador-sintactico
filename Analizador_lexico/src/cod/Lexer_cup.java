/* The following code was generated by JFlex 1.4.3 on 30/03/20 12:26 PM */

package cod;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30/03/20 12:26 PM from the specification file
 * <tt>../Analizador_lexico/src/cod/LexicoCup.flex</tt>
 */
class Lexer_cup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  6,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3, 44, 51, 24,  0, 41, 42, 52, 16, 17,  7, 39,  3, 40,  4,  5, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 22, 23, 47, 38, 46,  0, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 50,  1, 48,  1, 
     1,  1,  1, 35,  1, 49,  1,  1,  1,  1,  1, 20,  0, 21, 45,  1, 
     0, 10, 28, 11, 26,  8, 30, 31, 32, 12,  1, 37, 29, 14, 15, 13, 
     1,  1, 33,  9, 25, 27, 34, 36,  1,  1,  1, 18, 43, 19,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\5\1\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\12\1\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\1\5\0\1\3"+
    "\1\0\1\33\1\34\11\1\1\35\3\1\1\36\13\1"+
    "\1\37\1\40\1\41\1\2\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\1\1\53\1\0"+
    "\1\54\1\55\1\0\11\1\1\56\12\1\1\57\5\1"+
    "\1\0\1\1\1\60\1\3\1\61\1\62\4\1\1\63"+
    "\1\64\1\1\1\65\1\66\7\1\1\67\2\1\1\70"+
    "\1\71\2\1\1\0\1\72\2\1\1\73\6\1\1\74"+
    "\1\1\1\75\1\76\1\77\1\1\1\100\1\55\1\101"+
    "\1\102\1\103\2\1\1\104\1\105\2\1\1\106\1\107"+
    "\1\110\1\1\1\111\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\324\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\324\0\324\0\324"+
    "\0\324\0\324\0\324\0\324\0\324\0\324\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459"+
    "\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\324"+
    "\0\u0601\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774"+
    "\0\u07a9\0\u07de\0\324\0\324\0\u0813\0\u0848\0\u087d\0\u08b2"+
    "\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\65\0\u09f0\0\u0a25"+
    "\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd"+
    "\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\324\0\324\0\324"+
    "\0\u0d0b\0\324\0\324\0\324\0\324\0\324\0\324\0\324"+
    "\0\324\0\324\0\u0d40\0\u06a0\0\u0d75\0\u073f\0\u0774\0\u0daa"+
    "\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52"+
    "\0\u0f87\0\65\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5"+
    "\0\u10fa\0\u112f\0\u1164\0\u1199\0\65\0\u11ce\0\u1203\0\u1238"+
    "\0\u126d\0\u12a2\0\u12d7\0\u130c\0\324\0\u07de\0\65\0\65"+
    "\0\u1341\0\u1376\0\u13ab\0\u13e0\0\65\0\65\0\u1415\0\65"+
    "\0\65\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588"+
    "\0\65\0\u15bd\0\u15f2\0\65\0\65\0\u1627\0\u165c\0\u1691"+
    "\0\65\0\u16c6\0\u16fb\0\65\0\u1730\0\u1765\0\u179a\0\u17cf"+
    "\0\u1804\0\u1839\0\65\0\u186e\0\65\0\65\0\65\0\u18a3"+
    "\0\65\0\324\0\65\0\65\0\65\0\u18d8\0\u190d\0\65"+
    "\0\65\0\u1942\0\u1977\0\65\0\65\0\65\0\u19ac\0\65"+
    "\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\2\1\13\1\14\1\2\1\15\1\2"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\2\2\1\36\1\37\1\40\1\2\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\2\2\1\54\1\55\1\0\2\2\1\0\1\56\1\57"+
    "\2\0\10\2\11\0\15\2\12\0\3\2\4\0\1\3"+
    "\1\0\1\60\63\0\1\4\153\0\1\61\1\0\1\62"+
    "\36\0\1\63\64\0\1\64\17\0\2\2\1\0\1\56"+
    "\1\57\2\0\7\2\1\65\11\0\4\2\1\66\10\2"+
    "\12\0\3\2\3\0\2\2\1\0\1\56\1\57\2\0"+
    "\4\2\1\67\3\2\11\0\1\70\6\2\1\71\3\2"+
    "\1\72\1\2\12\0\3\2\3\0\2\2\1\0\1\56"+
    "\1\57\2\0\2\2\1\73\5\2\11\0\7\2\1\74"+
    "\5\2\12\0\3\2\3\0\2\2\1\0\1\56\1\57"+
    "\2\0\7\2\1\75\11\0\5\2\1\76\7\2\12\0"+
    "\3\2\3\0\2\2\1\0\1\56\1\57\2\0\2\2"+
    "\1\77\5\2\11\0\15\2\12\0\3\2\3\0\2\2"+
    "\1\0\1\56\1\57\2\0\10\2\11\0\10\2\1\100"+
    "\4\2\12\0\3\2\3\0\2\2\1\0\1\56\1\57"+
    "\2\0\1\101\4\2\1\102\2\2\11\0\15\2\12\0"+
    "\3\2\3\0\2\2\1\0\1\56\1\57\2\0\7\2"+
    "\1\103\11\0\15\2\12\0\3\2\3\0\2\2\1\0"+
    "\1\56\1\57\2\0\5\2\1\104\2\2\11\0\10\2"+
    "\1\105\4\2\12\0\3\2\3\0\2\2\1\0\1\56"+
    "\1\57\2\0\5\2\1\106\2\2\11\0\15\2\12\0"+
    "\3\2\3\0\2\2\1\0\1\56\1\57\2\0\2\2"+
    "\1\107\2\2\1\110\2\2\11\0\4\2\1\111\10\2"+
    "\12\0\3\2\3\0\2\2\1\0\1\56\1\57\2\0"+
    "\5\2\1\112\2\2\11\0\15\2\12\0\3\2\3\0"+
    "\2\2\1\0\1\56\1\57\2\0\5\2\1\113\2\2"+
    "\11\0\15\2\12\0\3\2\3\0\2\2\1\0\1\56"+
    "\1\57\2\0\10\2\11\0\1\114\14\2\12\0\3\2"+
    "\3\0\2\2\1\0\1\56\1\57\2\0\10\2\11\0"+
    "\7\2\1\115\5\2\12\0\3\2\50\0\1\116\64\0"+
    "\1\117\1\120\17\0\1\121\43\0\1\122\1\0\1\123"+
    "\5\0\1\124\54\0\1\125\70\0\1\126\65\0\1\127"+
    "\57\0\1\130\64\0\1\131\64\0\1\132\17\0\2\2"+
    "\1\0\1\56\1\57\2\0\10\2\11\0\15\2\12\0"+
    "\1\2\1\133\1\2\2\0\6\54\1\0\54\54\1\134"+
    "\1\54\65\135\40\0\1\136\25\0\2\57\1\0\1\56"+
    "\1\57\2\0\10\57\11\0\15\57\12\0\3\57\4\0"+
    "\1\137\62\0\6\61\1\0\56\61\7\62\1\140\55\62"+
    "\1\0\2\2\1\0\1\56\1\57\2\0\10\2\11\0"+
    "\2\2\1\141\12\2\12\0\3\2\3\0\2\2\1\0"+
    "\1\56\1\57\2\0\1\2\1\142\6\2\11\0\15\2"+
    "\12\0\3\2\3\0\2\2\1\0\1\56\1\57\2\0"+
    "\10\2\11\0\6\2\1\143\6\2\12\0\3\2\3\0"+
    "\2\2\1\0\1\56\1\57\2\0\10\2\11\0\10\2"+
    "\1\144\4\2\12\0\3\2\3\0\2\2\1\0\1\56"+
    "\1\57\2\0\5\2\1\145\2\2\11\0\15\2\12\0"+
    "\3\2\3\0\2\2\1\0\1\56\1\57\2\0\4\2"+
    "\1\146\3\2\11\0\15\2\12\0\3\2\3\0\2\2"+
    "\1\0\1\56\1\57\2\0\1\2\1\147\6\2\11\0"+
    "\15\2\12\0\3\2\3\0\2\2\1\0\1\56\1\57"+
    "\2\0\2\2\1\150\5\2\11\0\15\2\12\0\3\2"+
    "\3\0\2\2\1\0\1\56\1\57\2\0\3\2\1\151"+
    "\4\2\11\0\1\152\14\2\12\0\3\2\3\0\2\2"+
    "\1\0\1\56\1\57\2\0\4\2\1\153\3\2\11\0"+
    "\15\2\12\0\3\2\3\0\2\2\1\0\1\56\1\57"+
    "\2\0\10\2\11\0\2\2\1\154\12\2\12\0\3\2"+
    "\3\0\2\2\1\0\1\56\1\57\2\0\10\2\11\0"+
    "\5\2\1\155\7\2\12\0\3\2\3\0\2\2\1\0"+
    "\1\56\1\57\2\0\10\2\11\0\2\2\1\156\12\2"+
    "\12\0\3\2\3\0\2\2\1\0\1\56\1\57\2\0"+
    "\1\2\1\157\2\2\1\160\3\2\11\0\15\2\12\0"+
    "\3\2\3\0\2\2\1\0\1\56\1\57\2\0\5\2"+
    "\1\161\2\2\11\0\15\2\12\0\3\2\3\0\2\2"+
    "\1\0\1\56\1\57\2\0\1\162\7\2\11\0\15\2"+
    "\12\0\3\2\3\0\2\2\1\0\1\56\1\57\2\0"+
    "\7\2\1\163\11\0\15\2\12\0\3\2\3\0\2\2"+
    "\1\0\1\56\1\57\2\0\10\2\11\0\4\2\1\164"+
    "\10\2\12\0\3\2\3\0\2\2\1\0\1\56\1\57"+
    "\2\0\10\2\11\0\10\2\1\165\4\2\12\0\3\2"+
    "\3\0\2\2\1\0\1\56\1\57\2\0\5\2\1\166"+
    "\2\2\11\0\15\2\12\0\3\2\3\0\2\2\1\0"+
    "\1\56\1\57\2\0\10\2\11\0\1\167\14\2\12\0"+
    "\3\2\3\0\2\2\1\0\1\56\1\57\2\0\4\2"+
    "\1\170\3\2\11\0\15\2\12\0\3\2\3\0\2\2"+
    "\1\0\1\56\1\57\2\0\10\2\11\0\10\2\1\171"+
    "\4\2\12\0\3\2\3\0\2\2\1\0\1\56\1\57"+
    "\2\0\4\2\1\172\3\2\11\0\15\2\12\0\3\2"+
    "\4\0\1\121\1\0\1\173\61\0\2\2\1\0\1\56"+
    "\1\57\2\0\10\2\11\0\15\2\12\0\2\2\1\174"+
    "\66\0\1\175\5\62\1\176\1\62\1\140\55\62\1\0"+
    "\2\2\1\0\1\56\1\57\2\0\6\2\1\177\1\2"+
    "\11\0\15\2\12\0\3\2\3\0\2\2\1\0\1\56"+
    "\1\57\2\0\1\200\7\2\11\0\15\2\12\0\3\2"+
    "\3\0\2\2\1\0\1\56\1\57\2\0\7\2\1\201"+
    "\11\0\15\2\12\0\3\2\3\0\2\2\1\0\1\56"+
    "\1\57\2\0\10\2\11\0\2\2\1\202\12\2\12\0"+
    "\3\2\3\0\2\2\1\0\1\56\1\57\2\0\10\2"+
    "\11\0\10\2\1\203\4\2\12\0\3\2\3\0\2\2"+
    "\1\0\1\56\1\57\2\0\10\2\11\0\1\204\14\2"+
    "\12\0\3\2\3\0\2\2\1\0\1\56\1\57\2\0"+
    "\1\205\7\2\11\0\15\2\12\0\3\2\3\0\2\2"+
    "\1\0\1\56\1\57\2\0\10\2\11\0\10\2\1\206"+
    "\4\2\12\0\3\2\3\0\2\2\1\0\1\56\1\57"+
    "\2\0\10\2\11\0\4\2\1\207\10\2\12\0\3\2"+
    "\3\0\2\2\1\0\1\56\1\57\2\0\7\2\1\210"+
    "\11\0\15\2\12\0\3\2\3\0\2\2\1\0\1\56"+
    "\1\57\2\0\1\211\7\2\11\0\15\2\12\0\3\2"+
    "\3\0\2\2\1\0\1\56\1\57\2\0\2\2\1\212"+
    "\1\2\1\213\3\2\11\0\15\2\12\0\3\2\3\0"+
    "\2\2\1\0\1\56\1\57\2\0\10\2\11\0\3\2"+
    "\1\214\11\2\12\0\3\2\3\0\2\2\1\0\1\56"+
    "\1\57\2\0\4\2\1\215\3\2\11\0\15\2\12\0"+
    "\3\2\3\0\2\2\1\0\1\56\1\57\2\0\5\2"+
    "\1\216\2\2\11\0\15\2\12\0\3\2\3\0\2\2"+
    "\1\0\1\56\1\57\2\0\10\2\11\0\4\2\1\217"+
    "\10\2\12\0\3\2\3\0\2\2\1\0\1\56\1\57"+
    "\2\0\2\2\1\220\5\2\11\0\15\2\12\0\3\2"+
    "\3\0\2\2\1\0\1\56\1\57\2\0\10\2\11\0"+
    "\6\2\1\221\6\2\12\0\3\2\3\0\2\2\1\0"+
    "\1\56\1\57\2\0\1\2\1\222\6\2\11\0\15\2"+
    "\12\0\3\2\3\0\2\2\1\0\1\56\1\57\2\0"+
    "\2\2\1\223\5\2\11\0\15\2\12\0\3\2\3\0"+
    "\2\2\1\0\1\56\1\57\2\0\5\2\1\224\2\2"+
    "\11\0\15\2\12\0\3\2\3\0\2\2\1\0\1\56"+
    "\1\57\2\0\10\2\11\0\1\2\1\225\13\2\12\0"+
    "\3\2\3\0\2\2\1\0\1\56\1\57\2\0\4\2"+
    "\1\226\3\2\11\0\15\2\12\0\3\2\3\0\2\2"+
    "\1\0\1\56\1\57\2\0\10\2\11\0\4\2\1\227"+
    "\10\2\12\0\3\2\4\0\1\230\63\0\2\2\1\0"+
    "\1\56\1\57\2\0\10\2\11\0\15\2\12\0\2\2"+
    "\1\231\3\0\2\2\1\0\1\56\1\57\2\0\1\232"+
    "\7\2\11\0\15\2\12\0\3\2\3\0\2\2\1\0"+
    "\1\56\1\57\2\0\3\2\1\233\4\2\11\0\15\2"+
    "\12\0\3\2\3\0\2\2\1\0\1\56\1\57\2\0"+
    "\10\2\11\0\1\234\14\2\12\0\3\2\3\0\2\2"+
    "\1\0\1\56\1\57\2\0\3\2\1\235\4\2\11\0"+
    "\15\2\12\0\3\2\3\0\2\2\1\0\1\56\1\57"+
    "\2\0\10\2\11\0\2\2\1\236\12\2\12\0\3\2"+
    "\3\0\2\2\1\0\1\56\1\57\2\0\10\2\11\0"+
    "\2\2\1\237\12\2\12\0\3\2\3\0\2\2\1\0"+
    "\1\56\1\57\2\0\7\2\1\240\11\0\15\2\12\0"+
    "\3\2\3\0\2\2\1\0\1\56\1\57\2\0\10\2"+
    "\11\0\4\2\1\241\10\2\12\0\3\2\3\0\2\2"+
    "\1\0\1\56\1\57\2\0\10\2\11\0\6\2\1\242"+
    "\6\2\12\0\3\2\3\0\2\2\1\0\1\56\1\57"+
    "\2\0\7\2\1\243\11\0\15\2\12\0\3\2\3\0"+
    "\2\2\1\0\1\56\1\57\2\0\1\244\7\2\11\0"+
    "\15\2\12\0\3\2\3\0\2\2\1\0\1\56\1\57"+
    "\2\0\10\2\11\0\14\2\1\245\12\0\3\2\3\0"+
    "\2\2\1\0\1\56\1\57\2\0\1\246\7\2\11\0"+
    "\15\2\12\0\3\2\3\0\2\2\1\0\1\56\1\57"+
    "\2\0\10\2\11\0\1\247\14\2\12\0\3\2\3\0"+
    "\2\2\1\0\1\56\1\57\2\0\7\2\1\250\11\0"+
    "\15\2\12\0\3\2\3\0\2\2\1\0\1\56\1\57"+
    "\2\0\1\251\7\2\11\0\15\2\12\0\3\2\4\0"+
    "\1\230\16\0\1\252\44\0\2\2\1\0\1\56\1\57"+
    "\2\0\10\2\11\0\1\2\1\253\13\2\12\0\3\2"+
    "\3\0\2\2\1\0\1\56\1\57\2\0\10\2\11\0"+
    "\1\254\14\2\12\0\3\2\3\0\2\2\1\0\1\56"+
    "\1\57\2\0\10\2\11\0\7\2\1\255\5\2\12\0"+
    "\3\2\3\0\2\2\1\0\1\56\1\57\2\0\10\2"+
    "\11\0\1\2\1\256\13\2\12\0\3\2\3\0\2\2"+
    "\1\0\1\56\1\57\2\0\10\2\11\0\4\2\1\257"+
    "\10\2\12\0\3\2\3\0\2\2\1\0\1\56\1\57"+
    "\2\0\1\260\7\2\11\0\15\2\12\0\3\2\3\0"+
    "\2\2\1\0\1\56\1\57\2\0\1\261\7\2\11\0"+
    "\15\2\12\0\3\2\3\0\2\2\1\0\1\56\1\57"+
    "\2\0\7\2\1\262\11\0\15\2\12\0\3\2\3\0"+
    "\2\2\1\0\1\56\1\57\2\0\2\2\1\263\5\2"+
    "\11\0\15\2\12\0\3\2\3\0\2\2\1\0\1\56"+
    "\1\57\2\0\10\2\11\0\6\2\1\264\6\2\12\0"+
    "\3\2\3\0\2\2\1\0\1\56\1\57\2\0\1\265"+
    "\7\2\11\0\15\2\12\0\3\2\3\0\2\2\1\0"+
    "\1\56\1\57\2\0\10\2\11\0\1\266\14\2\12\0"+
    "\3\2\3\0\2\2\1\0\1\56\1\57\2\0\1\267"+
    "\7\2\11\0\15\2\12\0\3\2\3\0\2\2\1\0"+
    "\1\56\1\57\2\0\7\2\1\270\11\0\15\2\12\0"+
    "\3\2\3\0\2\2\1\0\1\56\1\57\2\0\10\2"+
    "\11\0\1\2\1\271\13\2\12\0\3\2\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6625];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\1\1\11\1\1\1\11\6\1\11\11\21\1"+
    "\1\11\3\1\5\0\1\1\1\0\2\11\31\1\3\11"+
    "\1\1\11\11\2\1\1\0\2\1\1\0\32\1\1\0"+
    "\1\1\1\11\32\1\1\0\21\1\1\11\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type,Object value){
        return new Symbol(type,yyline,yycolumn,value);
    }
    private Symbol symbol(int type){
        return new Symbol(type,yyline,yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer_cup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer_cup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { return new Symbol(sym.Numeral,yychar,yyline,yytext());
          }
        case 75: break;
        case 23: 
          { return new Symbol(sym.Op_negacion,yychar,yyline,yytext());
          }
        case 76: break;
        case 52: 
          { return new Symbol(sym.Char,yychar,yyline,yytext());
          }
        case 77: break;
        case 31: 
          { return new Symbol(sym.Igual_que,yychar,yyline,yytext());
          }
        case 78: break;
        case 4: 
          { return new Symbol(sym.Punto,yychar,yyline,yytext());
          }
        case 79: break;
        case 38: 
          { return new Symbol(sym.Op_y,yychar,yyline,yytext());
          }
        case 80: break;
        case 54: 
          { return new Symbol(sym.True,yychar,yyline,yytext());
          }
        case 81: break;
        case 44: 
          { return new Symbol(sym.Libreria,yychar,yyline,yytext());
          }
        case 82: break;
        case 11: 
          { return new Symbol(sym.Llave_c,yychar,yyline,yytext());
          }
        case 83: break;
        case 8: 
          { return new Symbol(sym.Parentesis_a,yychar,yyline,yytext());
          }
        case 84: break;
        case 40: 
          { return new Symbol(sym.Diferente_que,yychar,yyline,yytext());
          }
        case 85: break;
        case 61: 
          { return new Symbol(sym.Break,yychar,yyline,yytext());
          }
        case 86: break;
        case 18: 
          { return new Symbol(sym.Suma,yychar,yyline,yytext());
          }
        case 87: break;
        case 20: 
          { return new Symbol(sym.Modulo,yychar,yyline,yytext());
          }
        case 88: break;
        case 6: 
          { return new Symbol(sym.Linea,yychar,yyline,yytext());
          }
        case 89: break;
        case 3: 
          { /*Ignore*/
          }
        case 90: break;
        case 1: 
          { return new Symbol(sym.Identificador,yychar,yyline,yytext());
          }
        case 91: break;
        case 22: 
          { return new Symbol(sym.O_bit,yychar,yyline,yytext());
          }
        case 92: break;
        case 57: 
          { return new Symbol(sym.Void,yychar,yyline,yytext());
          }
        case 93: break;
        case 49: 
          { return new Symbol(sym.Enum,yychar,yyline,yytext());
          }
        case 94: break;
        case 63: 
          { return new Symbol(sym.Float,yychar,yyline,yytext());
          }
        case 95: break;
        case 67: 
          { return new Symbol(sym.Switch,yychar,yyline,yytext());
          }
        case 96: break;
        case 12: 
          { return new Symbol(sym.Corchete_a,yychar,yyline,yytext());
          }
        case 97: break;
        case 37: 
          { return new Symbol(sym.Mod_igual,yychar,yyline,yytext());
          }
        case 98: break;
        case 64: 
          { return new Symbol(sym.While,yychar,yyline,yytext());
          }
        case 99: break;
        case 47: 
          { return new Symbol(sym.For,yychar,yyline,yytext());
          }
        case 100: break;
        case 53: 
          { return new Symbol(sym.Main,yychar,yyline,yytext());
          }
        case 101: break;
        case 35: 
          { return new Symbol(sym.Decremento,yychar,yyline,yytext());
          }
        case 102: break;
        case 9: 
          { return new Symbol(sym.Parentesis_c,yychar,yyline,yytext());
          }
        case 103: break;
        case 5: 
          { return new Symbol(sym.Division,yychar,yyline,yytext());
          }
        case 104: break;
        case 26: 
          { return new Symbol(sym.Menor_que,yychar,yyline,yytext());
          }
        case 105: break;
        case 55: 
          { return new Symbol(sym.Long,yychar,yyline,yytext());
          }
        case 106: break;
        case 36: 
          { return new Symbol(sym.Asi_apu,yychar,yyline,yytext());
          }
        case 107: break;
        case 27: 
          { return new Symbol(sym.Div_igual,yychar,yyline,yytext());
          }
        case 108: break;
        case 15: 
          { return new Symbol(sym.Punto_coma,yychar,yyline,yytext());
          }
        case 109: break;
        case 2: 
          { return new Symbol(sym.Numero,yychar,yyline,yytext());
          }
        case 110: break;
        case 19: 
          { return new Symbol(sym.Resta,yychar,yyline,yytext());
          }
        case 111: break;
        case 24: 
          { return new Symbol(sym.Op_xor,yychar,yyline,yytext());
          }
        case 112: break;
        case 59: 
          { return new Symbol(sym.Short,yychar,yyline,yytext());
          }
        case 113: break;
        case 70: 
          { return new Symbol(sym.string,yychar,yyline,yytext());
          }
        case 114: break;
        case 65: 
          { return new Symbol(sym.Signed,yychar,yyline,yytext());
          }
        case 115: break;
        case 30: 
          { return new Symbol(sym.Do,yychar,yyline,yytext());
          }
        case 116: break;
        case 7: 
          { return new Symbol(sym.Multiplicacion,yychar,yyline,yytext());
          }
        case 117: break;
        case 73: 
          { return new Symbol(sym.Boolean,yychar,yyline,yytext());
          }
        case 118: break;
        case 48: 
          { return new Symbol(sym.Ch,yychar,yyline,yytext());
          }
        case 119: break;
        case 34: 
          { return new Symbol(sym.Resta_igual,yychar,yyline,yytext());
          }
        case 120: break;
        case 13: 
          { return new Symbol(sym.Corchete_c,yychar,yyline,yytext());
          }
        case 121: break;
        case 45: 
          { return new Symbol(sym.Real,yychar,yyline,yytext());
          }
        case 122: break;
        case 14: 
          { return new Symbol(sym.Dos_puntos,yychar,yyline,yytext());
          }
        case 123: break;
        case 71: 
          { return new Symbol(sym.Include,yychar,yyline,yytext());
          }
        case 124: break;
        case 46: 
          { return new Symbol(sym.Int,yychar,yyline,yytext());
          }
        case 125: break;
        case 69: 
          { return new Symbol(sym.Double,yychar,yyline,yytext());
          }
        case 126: break;
        case 68: 
          { return new Symbol(sym.Define,yychar,yyline,yytext());
          }
        case 127: break;
        case 42: 
          { return new Symbol(sym.Menor_o_igual,yychar,yyline,yytext());
          }
        case 128: break;
        case 50: 
          { return new Symbol(sym.Else,yychar,yyline,yytext());
          }
        case 129: break;
        case 66: 
          { return new Symbol(sym.Struct,yychar,yyline,yytext());
          }
        case 130: break;
        case 56: 
          { return new Symbol(sym.Goto,yychar,yyline,yytext());
          }
        case 131: break;
        case 39: 
          { return new Symbol(sym.Op_o,yychar,yyline,yytext());
          }
        case 132: break;
        case 21: 
          { return new Symbol(sym.Y_bit,yychar,yyline,yytext());
          }
        case 133: break;
        case 58: 
          { return new Symbol(sym.Nul,yychar,yyline,yytext());
          }
        case 134: break;
        case 41: 
          { return new Symbol(sym.Mayor_o_igual,yychar,yyline,yytext());
          }
        case 135: break;
        case 72: 
          { return new Symbol(sym.Default,yychar,yyline,yytext());
          }
        case 136: break;
        case 25: 
          { return new Symbol(sym.Mayor_que,yychar,yyline,yytext());
          }
        case 137: break;
        case 62: 
          { return new Symbol(sym.False,yychar,yyline,yytext());
          }
        case 138: break;
        case 29: 
          { return new Symbol(sym.If,yychar,yyline,yytext());
          }
        case 139: break;
        case 28: 
          { return new Symbol(sym.Mul_igual,yychar,yyline,yytext());
          }
        case 140: break;
        case 10: 
          { return new Symbol(sym.Llave_a,yychar,yyline,yytext());
          }
        case 141: break;
        case 17: 
          { return new Symbol(sym.Igual,yychar,yyline,yytext());
          }
        case 142: break;
        case 32: 
          { return new Symbol(sym.Suma_igual,yychar,yyline,yytext());
          }
        case 143: break;
        case 74: 
          { return new Symbol(sym.Unsi,yychar,yyline,yytext());
          }
        case 144: break;
        case 43: 
          { return new Symbol(sym.Str,yychar,yyline,yytext());
          }
        case 145: break;
        case 51: 
          { return new Symbol(sym.Case,yychar,yyline,yytext());
          }
        case 146: break;
        case 60: 
          { return new Symbol(sym.Union,yychar,yyline,yytext());
          }
        case 147: break;
        case 33: 
          { return new Symbol(sym.Incremento,yychar,yyline,yytext());
          }
        case 148: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
