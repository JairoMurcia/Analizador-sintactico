
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 30 12:20:52 COT 2020
//----------------------------------------------------

package cod;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 30 12:20:52 COT 2020
  */
public class sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintax() {super();}

  /** Constructor which sets the default scanner. */
  public sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\350\000\002\002\011\000\002\002\004\000\002\002" +
    "\010\000\002\002\013\000\002\002\012\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\004\000\002\020\010" +
    "\000\002\004\007\000\002\004\007\000\002\004\007\000" +
    "\002\004\005\000\002\004\010\000\002\004\010\000\002" +
    "\004\010\000\002\004\006\000\002\004\010\000\002\004" +
    "\010\000\002\004\010\000\002\004\006\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\004\005\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\005\000\002\004\010\000\002\004\010\000\002\004" +
    "\010\000\002\004\006\000\002\004\011\000\002\004\011" +
    "\000\002\004\011\000\002\004\007\000\002\004\011\000" +
    "\002\004\011\000\002\004\011\000\002\004\007\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\004" +
    "\006\000\002\004\010\000\002\004\010\000\002\004\010" +
    "\000\002\004\006\000\002\004\010\000\002\004\010\000" +
    "\002\004\010\000\002\004\006\000\002\004\011\000\002" +
    "\004\011\000\002\004\011\000\002\004\007\000\002\004" +
    "\011\000\002\004\011\000\002\004\011\000\002\004\007" +
    "\000\002\004\010\000\002\004\010\000\002\004\010\000" +
    "\002\004\006\000\002\004\010\000\002\004\010\000\002" +
    "\004\010\000\002\004\006\000\002\004\007\000\002\004" +
    "\007\000\002\004\007\000\002\004\007\000\002\004\005" +
    "\000\002\004\007\000\002\004\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\005\000\002\004\007\000\002" +
    "\004\007\000\002\004\007\000\002\004\007\000\002\004" +
    "\005\000\002\004\010\000\002\004\010\000\002\004\010" +
    "\000\002\004\010\000\002\004\006\000\002\004\007\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\005\000\002\004\007\000\002\004\007\000\002\004" +
    "\005\000\002\004\010\000\002\004\010\000\002\004\006" +
    "\000\002\004\010\000\002\004\010\000\002\004\006\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\007\000\002\014\011\000\002\017\012\000\002\017" +
    "\013\000\002\017\013\000\002\017\011\000\002\017\007" +
    "\000\002\010\011\000\002\021\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\004\000\002" +
    "\016\006\000\002\016\007\000\002\016\007\000\002\016" +
    "\007\000\002\016\011\000\002\016\011\000\002\016\011" +
    "\000\002\016\007\000\002\016\007\000\002\016\007\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\022\011\000\002\022\011\000\002\022\011" +
    "\000\002\022\011\000\002\022\011\000\002\022\011\000" +
    "\002\022\011\000\002\023\006\000\002\023\006\000\002" +
    "\023\006\000\002\023\006\000\002\023\006\000\002\023" +
    "\006\000\002\023\007\000\002\023\007\000\002\023\007" +
    "\000\002\023\007\000\002\023\007\000\002\023\007\000" +
    "\002\023\010\000\002\023\010\000\002\023\010\000\002" +
    "\023\010\000\002\023\010\000\002\023\010\000\002\023" +
    "\007\000\002\023\007\000\002\023\007\000\002\023\007" +
    "\000\002\023\007\000\002\023\007\000\002\023\007\000" +
    "\002\024\004\000\002\024\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u021a\000\006\005\004\021\005\001\002\000\004\006" +
    "\u0214\001\002\000\004\005\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\000\001\002\000\004\006\011\001" +
    "\002\000\004\007\012\001\002\000\004\010\013\001\002" +
    "\000\054\004\050\006\017\021\035\022\040\023\024\024" +
    "\056\025\042\027\041\030\031\033\016\034\014\037\046" +
    "\043\051\046\015\061\043\100\030\101\036\110\033\112" +
    "\021\113\053\115\044\001\002\000\004\110\u020e\001\002" +
    "\000\004\006\u01f6\001\002\000\004\110\u01ef\001\002\000" +
    "\016\100\030\101\036\110\075\112\021\113\053\115\044" +
    "\001\002\000\014\004\ufff3\011\ufff3\044\ufff3\045\ufff3\047" +
    "\ufff3\001\002\000\042\004\uff3f\007\uff3f\011\uff3f\017\uff3f" +
    "\044\uff3f\045\uff3f\047\uff3f\057\uff3f\060\uff3f\062\uff3f\063" +
    "\u01d8\064\u01d9\065\u01d7\066\u01dc\067\u01da\070\u01db\001\002" +
    "\000\014\004\ufff7\011\ufff7\044\ufff7\045\ufff7\047\ufff7\001" +
    "\002\000\014\004\ufff1\011\ufff1\044\ufff1\045\ufff1\047\ufff1" +
    "\001\002\000\004\110\u01cc\001\002\000\004\011\u01cb\001" +
    "\002\000\014\004\ufffc\011\ufffc\044\ufffc\045\ufffc\047\ufffc" +
    "\001\002\000\014\004\ufffb\011\ufffb\044\ufffb\045\ufffb\047" +
    "\ufffb\001\002\000\026\004\uff41\007\uff41\011\uff41\017\uff41" +
    "\044\uff41\045\uff41\047\uff41\057\uff41\060\uff41\062\uff41\001" +
    "\002\000\014\021\u0188\024\u0185\025\u0186\033\u0184\110\u0187" +
    "\001\002\000\014\004\ufff2\011\ufff2\044\ufff2\045\ufff2\047" +
    "\ufff2\001\002\000\030\017\u017a\051\u017b\057\uff3c\060\uff3c" +
    "\062\uff3c\063\103\064\104\065\102\066\107\067\105\070" +
    "\106\001\002\000\014\004\ufff9\011\ufff9\044\ufff9\045\ufff9" +
    "\047\ufff9\001\002\000\004\110\u016a\001\002\000\026\004" +
    "\uff40\007\uff40\011\uff40\017\uff40\044\uff40\045\uff40\047\uff40" +
    "\057\uff40\060\uff40\062\uff40\001\002\000\014\004\ufff8\011" +
    "\ufff8\044\ufff8\045\ufff8\047\ufff8\001\002\000\004\110\u015f" +
    "\001\002\000\014\021\u011c\024\u0119\025\u011a\033\u0118\110" +
    "\u011b\001\002\000\006\021\u0103\110\u0102\001\002\000\022" +
    "\006\355\061\043\100\030\101\036\110\075\112\021\113" +
    "\053\115\044\001\002\000\026\004\uff3d\007\uff3d\011\uff3d" +
    "\017\uff3d\044\uff3d\045\uff3d\047\uff3d\057\uff3d\060\uff3d\062" +
    "\uff3d\001\002\000\014\004\ufff6\011\ufff6\044\ufff6\045\ufff6" +
    "\047\ufff6\001\002\000\004\006\347\001\002\000\014\004" +
    "\ufff4\011\ufff4\044\ufff4\045\ufff4\047\ufff4\001\002\000\054" +
    "\004\252\006\017\021\035\022\040\023\024\024\056\025" +
    "\042\027\041\030\031\033\016\034\014\037\046\043\051" +
    "\046\015\061\043\100\030\101\036\110\033\112\021\113" +
    "\053\115\044\001\002\000\004\006\224\001\002\000\010" +
    "\057\207\060\206\062\205\001\002\000\042\004\uff3e\007" +
    "\uff3e\011\uff3e\017\uff3e\044\uff3e\045\uff3e\047\uff3e\057\uff3e" +
    "\060\uff3e\062\uff3e\063\156\064\160\065\155\066\162\067" +
    "\157\070\161\001\002\000\014\004\ufffa\011\ufffa\044\ufffa" +
    "\045\ufffa\047\ufffa\001\002\000\014\004\ufff5\011\ufff5\044" +
    "\ufff5\045\ufff5\047\ufff5\001\002\000\010\021\061\022\057" +
    "\110\060\001\002\000\004\110\142\001\002\000\006\017" +
    "\132\051\133\001\002\000\004\110\062\001\002\000\006" +
    "\017\063\051\064\001\002\000\014\004\uffe7\011\uffe7\044" +
    "\uffe7\045\uffe7\047\uffe7\001\002\000\006\110\067\112\065" +
    "\001\002\000\004\017\074\001\002\000\004\017\073\001" +
    "\002\000\006\017\070\052\071\001\002\000\014\004\uffe9" +
    "\011\uffe9\044\uffe9\045\uffe9\047\uffe9\001\002\000\004\110" +
    "\072\001\002\000\020\004\uff85\007\uff85\011\uff85\017\uff85" +
    "\044\uff85\045\uff85\047\uff85\001\002\000\014\004\uffe8\011" +
    "\uffe8\044\uffe8\045\uffe8\047\uffe8\001\002\000\034\004\uffea" +
    "\006\017\011\uffea\044\uffea\045\uffea\047\uffea\061\043\100" +
    "\030\101\036\110\075\112\021\113\053\115\044\001\002" +
    "\000\042\004\uff3c\007\uff3c\011\uff3c\017\uff3c\044\uff3c\045" +
    "\uff3c\047\uff3c\057\uff3c\060\uff3c\062\uff3c\063\103\064\104" +
    "\065\102\066\107\067\105\070\106\001\002\000\004\017" +
    "\077\001\002\000\004\110\101\001\002\000\016\004\uff89" +
    "\007\uff89\011\uff89\044\uff89\045\uff89\047\uff89\001\002\000" +
    "\004\052\071\001\002\000\010\110\131\112\127\113\130" +
    "\001\002\000\010\110\126\112\124\113\125\001\002\000" +
    "\010\110\123\112\121\113\122\001\002\000\010\110\120" +
    "\112\116\113\117\001\002\000\010\110\115\112\113\113" +
    "\114\001\002\000\010\110\112\112\110\113\111\001\002" +
    "\000\026\004\uff69\007\uff69\011\uff69\017\uff69\044\uff69\045" +
    "\uff69\047\uff69\057\uff69\060\uff69\062\uff69\001\002\000\026" +
    "\004\uff5e\007\uff5e\011\uff5e\017\uff5e\044\uff5e\045\uff5e\047" +
    "\uff5e\057\uff5e\060\uff5e\062\uff5e\001\002\000\026\004\uff75" +
    "\007\uff75\011\uff75\017\uff75\044\uff75\045\uff75\047\uff75\057" +
    "\uff75\060\uff75\062\uff75\001\002\000\026\004\uff66\007\uff66" +
    "\011\uff66\017\uff66\044\uff66\045\uff66\047\uff66\057\uff66\060" +
    "\uff66\062\uff66\001\002\000\026\004\uff5b\007\uff5b\011\uff5b" +
    "\017\uff5b\044\uff5b\045\uff5b\047\uff5b\057\uff5b\060\uff5b\062" +
    "\uff5b\001\002\000\026\004\uff72\007\uff72\011\uff72\017\uff72" +
    "\044\uff72\045\uff72\047\uff72\057\uff72\060\uff72\062\uff72\001" +
    "\002\000\026\004\uff65\007\uff65\011\uff65\017\uff65\044\uff65" +
    "\045\uff65\047\uff65\057\uff65\060\uff65\062\uff65\001\002\000" +
    "\026\004\uff5a\007\uff5a\011\uff5a\017\uff5a\044\uff5a\045\uff5a" +
    "\047\uff5a\057\uff5a\060\uff5a\062\uff5a\001\002\000\026\004" +
    "\uff71\007\uff71\011\uff71\017\uff71\044\uff71\045\uff71\047\uff71" +
    "\057\uff71\060\uff71\062\uff71\001\002\000\026\004\uff68\007" +
    "\uff68\011\uff68\017\uff68\044\uff68\045\uff68\047\uff68\057\uff68" +
    "\060\uff68\062\uff68\001\002\000\026\004\uff5d\007\uff5d\011" +
    "\uff5d\017\uff5d\044\uff5d\045\uff5d\047\uff5d\057\uff5d\060\uff5d" +
    "\062\uff5d\001\002\000\026\004\uff74\007\uff74\011\uff74\017" +
    "\uff74\044\uff74\045\uff74\047\uff74\057\uff74\060\uff74\062\uff74" +
    "\001\002\000\026\004\uff67\007\uff67\011\uff67\017\uff67\044" +
    "\uff67\045\uff67\047\uff67\057\uff67\060\uff67\062\uff67\001\002" +
    "\000\026\004\uff5c\007\uff5c\011\uff5c\017\uff5c\044\uff5c\045" +
    "\uff5c\047\uff5c\057\uff5c\060\uff5c\062\uff5c\001\002\000\026" +
    "\004\uff73\007\uff73\011\uff73\017\uff73\044\uff73\045\uff73\047" +
    "\uff73\057\uff73\060\uff73\062\uff73\001\002\000\026\004\uff6a" +
    "\007\uff6a\011\uff6a\017\uff6a\044\uff6a\045\uff6a\047\uff6a\057" +
    "\uff6a\060\uff6a\062\uff6a\001\002\000\026\004\uff5f\007\uff5f" +
    "\011\uff5f\017\uff5f\044\uff5f\045\uff5f\047\uff5f\057\uff5f\060" +
    "\uff5f\062\uff5f\001\002\000\026\004\uff76\007\uff76\011\uff76" +
    "\017\uff76\044\uff76\045\uff76\047\uff76\057\uff76\060\uff76\062" +
    "\uff76\001\002\000\014\004\uffdf\011\uffdf\044\uffdf\045\uffdf" +
    "\047\uffdf\001\002\000\006\110\136\112\134\001\002\000" +
    "\004\017\141\001\002\000\004\017\140\001\002\000\006" +
    "\017\137\052\071\001\002\000\014\004\uffe1\011\uffe1\044" +
    "\uffe1\045\uffe1\047\uffe1\001\002\000\014\004\uffe0\011\uffe0" +
    "\044\uffe0\045\uffe0\047\uffe0\001\002\000\014\004\uffe2\011" +
    "\uffe2\044\uffe2\045\uffe2\047\uffe2\001\002\000\006\017\143" +
    "\051\144\001\002\000\014\004\uff9f\011\uff9f\044\uff9f\045" +
    "\uff9f\047\uff9f\001\002\000\010\110\150\112\145\113\147" +
    "\001\002\000\004\017\154\001\002\000\004\017\153\001" +
    "\002\000\004\017\152\001\002\000\006\017\151\052\071" +
    "\001\002\000\014\004\uffa1\011\uffa1\044\uffa1\045\uffa1\047" +
    "\uffa1\001\002\000\014\004\uffa2\011\uffa2\044\uffa2\045\uffa2" +
    "\047\uffa2\001\002\000\014\004\uffa0\011\uffa0\044\uffa0\045" +
    "\uffa0\047\uffa0\001\002\000\014\004\uffa3\011\uffa3\044\uffa3" +
    "\045\uffa3\047\uffa3\001\002\000\010\110\204\112\202\113" +
    "\203\001\002\000\010\110\201\112\177\113\200\001\002" +
    "\000\010\110\176\112\174\113\175\001\002\000\010\110" +
    "\173\112\171\113\172\001\002\000\010\110\170\112\166" +
    "\113\167\001\002\000\010\110\165\112\163\113\164\001" +
    "\002\000\026\004\uff46\007\uff46\011\uff46\017\uff46\044\uff46" +
    "\045\uff46\047\uff46\057\uff46\060\uff46\062\uff46\001\002\000" +
    "\026\004\uff52\007\uff52\011\uff52\017\uff52\044\uff52\045\uff52" +
    "\047\uff52\057\uff52\060\uff52\062\uff52\001\002\000\026\004" +
    "\uff58\007\uff58\011\uff58\017\uff58\044\uff58\045\uff58\047\uff58" +
    "\057\uff58\060\uff58\062\uff58\001\002\000\026\004\uff43\007" +
    "\uff43\011\uff43\017\uff43\044\uff43\045\uff43\047\uff43\057\uff43" +
    "\060\uff43\062\uff43\001\002\000\026\004\uff4f\007\uff4f\011" +
    "\uff4f\017\uff4f\044\uff4f\045\uff4f\047\uff4f\057\uff4f\060\uff4f" +
    "\062\uff4f\001\002\000\026\004\uff55\007\uff55\011\uff55\017" +
    "\uff55\044\uff55\045\uff55\047\uff55\057\uff55\060\uff55\062\uff55" +
    "\001\002\000\026\004\uff45\007\uff45\011\uff45\017\uff45\044" +
    "\uff45\045\uff45\047\uff45\057\uff45\060\uff45\062\uff45\001\002" +
    "\000\026\004\uff51\007\uff51\011\uff51\017\uff51\044\uff51\045" +
    "\uff51\047\uff51\057\uff51\060\uff51\062\uff51\001\002\000\026" +
    "\004\uff57\007\uff57\011\uff57\017\uff57\044\uff57\045\uff57\047" +
    "\uff57\057\uff57\060\uff57\062\uff57\001\002\000\026\004\uff42" +
    "\007\uff42\011\uff42\017\uff42\044\uff42\045\uff42\047\uff42\057" +
    "\uff42\060\uff42\062\uff42\001\002\000\026\004\uff4e\007\uff4e" +
    "\011\uff4e\017\uff4e\044\uff4e\045\uff4e\047\uff4e\057\uff4e\060" +
    "\uff4e\062\uff4e\001\002\000\026\004\uff54\007\uff54\011\uff54" +
    "\017\uff54\044\uff54\045\uff54\047\uff54\057\uff54\060\uff54\062" +
    "\uff54\001\002\000\026\004\uff44\007\uff44\011\uff44\017\uff44" +
    "\044\uff44\045\uff44\047\uff44\057\uff44\060\uff44\062\uff44\001" +
    "\002\000\026\004\uff50\007\uff50\011\uff50\017\uff50\044\uff50" +
    "\045\uff50\047\uff50\057\uff50\060\uff50\062\uff50\001\002\000" +
    "\026\004\uff56\007\uff56\011\uff56\017\uff56\044\uff56\045\uff56" +
    "\047\uff56\057\uff56\060\uff56\062\uff56\001\002\000\026\004" +
    "\uff47\007\uff47\011\uff47\017\uff47\044\uff47\045\uff47\047\uff47" +
    "\057\uff47\060\uff47\062\uff47\001\002\000\026\004\uff53\007" +
    "\uff53\011\uff53\017\uff53\044\uff53\045\uff53\047\uff53\057\uff53" +
    "\060\uff53\062\uff53\001\002\000\026\004\uff59\007\uff59\011" +
    "\uff59\017\uff59\044\uff59\045\uff59\047\uff59\057\uff59\060\uff59" +
    "\062\uff59\001\002\000\020\006\220\100\030\101\036\110" +
    "\075\112\021\113\053\115\044\001\002\000\020\006\214" +
    "\100\030\101\036\110\075\112\021\113\053\115\044\001" +
    "\002\000\020\006\210\100\030\101\036\110\075\112\021" +
    "\113\053\115\044\001\002\000\016\100\030\101\036\110" +
    "\075\112\021\113\053\115\044\001\002\000\020\004\uff84" +
    "\007\uff84\011\uff84\017\uff84\044\uff84\045\uff84\047\uff84\001" +
    "\002\000\004\007\213\001\002\000\020\004\uff79\007\uff79" +
    "\011\uff79\017\uff79\044\uff79\045\uff79\047\uff79\001\002\000" +
    "\016\100\030\101\036\110\075\112\021\113\053\115\044" +
    "\001\002\000\020\004\uff83\007\uff83\011\uff83\017\uff83\044" +
    "\uff83\045\uff83\047\uff83\001\002\000\004\007\217\001\002" +
    "\000\020\004\uff78\007\uff78\011\uff78\017\uff78\044\uff78\045" +
    "\uff78\047\uff78\001\002\000\016\100\030\101\036\110\075" +
    "\112\021\113\053\115\044\001\002\000\020\004\uff82\007" +
    "\uff82\011\uff82\017\uff82\044\uff82\045\uff82\047\uff82\001\002" +
    "\000\004\007\223\001\002\000\020\004\uff77\007\uff77\011" +
    "\uff77\017\uff77\044\uff77\045\uff77\047\uff77\001\002\000\020" +
    "\100\230\101\226\110\233\112\225\113\232\114\227\115" +
    "\231\001\002\000\004\007\340\001\002\000\004\007\334" +
    "\001\002\000\004\007\330\001\002\000\004\007\324\001" +
    "\002\000\004\007\320\001\002\000\004\007\314\001\002" +
    "\000\004\007\234\001\002\000\004\010\235\001\002\000" +
    "\006\044\237\045\236\001\002\000\004\016\310\001\002" +
    "\000\016\100\245\101\243\112\242\113\246\114\244\115" +
    "\247\001\002\000\004\011\241\001\002\000\014\004\uff3b" +
    "\011\uff3b\044\uff3b\045\uff3b\047\uff3b\001\002\000\004\016" +
    "\303\001\002\000\004\016\276\001\002\000\004\016\271" +
    "\001\002\000\004\016\264\001\002\000\004\016\257\001" +
    "\002\000\004\016\250\001\002\000\054\004\252\006\017" +
    "\021\035\022\040\023\024\024\056\025\042\027\041\030" +
    "\031\033\016\034\014\037\046\043\051\046\015\061\043" +
    "\100\030\101\036\110\033\112\021\113\053\115\044\001" +
    "\002\000\014\004\uff32\011\uff32\044\237\045\236\047\254" +
    "\001\002\000\054\004\252\006\017\021\035\022\040\023" +
    "\024\024\056\025\042\027\041\030\031\033\016\034\014" +
    "\037\046\043\051\046\015\061\043\100\030\101\036\110" +
    "\033\112\021\113\053\115\044\001\002\000\014\004\ufff0" +
    "\011\ufff0\044\ufff0\045\ufff0\047\ufff0\001\002\000\012\004" +
    "\uff2c\011\uff2c\044\237\045\236\001\002\000\006\004\uff20" +
    "\011\uff20\001\002\000\006\004\uff26\011\uff26\001\002\000" +
    "\054\004\252\006\017\021\035\022\040\023\024\024\056" +
    "\025\042\027\041\030\031\033\016\034\014\037\046\043" +
    "\051\046\015\061\043\100\030\101\036\110\033\112\021" +
    "\113\053\115\044\001\002\000\014\004\uff33\011\uff33\044" +
    "\237\045\236\047\261\001\002\000\012\004\uff2d\011\uff2d" +
    "\044\237\045\236\001\002\000\006\004\uff21\011\uff21\001" +
    "\002\000\006\004\uff27\011\uff27\001\002\000\054\004\252" +
    "\006\017\021\035\022\040\023\024\024\056\025\042\027" +
    "\041\030\031\033\016\034\014\037\046\043\051\046\015" +
    "\061\043\100\030\101\036\110\033\112\021\113\053\115" +
    "\044\001\002\000\014\004\uff30\011\uff30\044\237\045\236" +
    "\047\266\001\002\000\012\004\uff2a\011\uff2a\044\237\045" +
    "\236\001\002\000\006\004\uff1e\011\uff1e\001\002\000\006" +
    "\004\uff24\011\uff24\001\002\000\054\004\252\006\017\021" +
    "\035\022\040\023\024\024\056\025\042\027\041\030\031" +
    "\033\016\034\014\037\046\043\051\046\015\061\043\100" +
    "\030\101\036\110\033\112\021\113\053\115\044\001\002" +
    "\000\014\004\uff31\011\uff31\044\237\045\236\047\273\001" +
    "\002\000\012\004\uff2b\011\uff2b\044\237\045\236\001\002" +
    "\000\006\004\uff1f\011\uff1f\001\002\000\006\004\uff25\011" +
    "\uff25\001\002\000\054\004\252\006\017\021\035\022\040" +
    "\023\024\024\056\025\042\027\041\030\031\033\016\034" +
    "\014\037\046\043\051\046\015\061\043\100\030\101\036" +
    "\110\033\112\021\113\053\115\044\001\002\000\014\004" +
    "\uff2f\011\uff2f\044\237\045\236\047\300\001\002\000\012" +
    "\004\uff29\011\uff29\044\237\045\236\001\002\000\006\004" +
    "\uff1d\011\uff1d\001\002\000\006\004\uff23\011\uff23\001\002" +
    "\000\054\004\252\006\017\021\035\022\040\023\024\024" +
    "\056\025\042\027\041\030\031\033\016\034\014\037\046" +
    "\043\051\046\015\061\043\100\030\101\036\110\033\112" +
    "\021\113\053\115\044\001\002\000\014\004\uff34\011\uff34" +
    "\044\237\045\236\047\305\001\002\000\012\004\uff2e\011" +
    "\uff2e\044\237\045\236\001\002\000\006\004\uff22\011\uff22" +
    "\001\002\000\006\004\uff28\011\uff28\001\002\000\054\004" +
    "\252\006\017\021\035\022\040\023\024\024\056\025\042" +
    "\027\041\030\031\033\016\034\014\037\046\043\051\046" +
    "\015\061\043\100\030\101\036\110\033\112\021\113\053" +
    "\115\044\001\002\000\006\044\237\045\236\001\002\000" +
    "\004\004\313\001\002\000\006\004\uff1c\011\uff1c\001\002" +
    "\000\004\010\315\001\002\000\006\044\237\045\236\001" +
    "\002\000\004\011\317\001\002\000\014\004\uff39\011\uff39" +
    "\044\uff39\045\uff39\047\uff39\001\002\000\004\010\321\001" +
    "\002\000\006\044\237\045\236\001\002\000\004\011\323" +
    "\001\002\000\014\004\uff38\011\uff38\044\uff38\045\uff38\047" +
    "\uff38\001\002\000\004\010\325\001\002\000\006\044\237" +
    "\045\236\001\002\000\004\011\327\001\002\000\014\004" +
    "\uff36\011\uff36\044\uff36\045\uff36\047\uff36\001\002\000\004" +
    "\010\331\001\002\000\006\044\237\045\236\001\002\000" +
    "\004\011\333\001\002\000\014\004\uff37\011\uff37\044\uff37" +
    "\045\uff37\047\uff37\001\002\000\004\010\335\001\002\000" +
    "\006\044\237\045\236\001\002\000\004\011\337\001\002" +
    "\000\014\004\uff35\011\uff35\044\uff35\045\uff35\047\uff35\001" +
    "\002\000\004\010\341\001\002\000\006\044\237\045\236" +
    "\001\002\000\004\011\343\001\002\000\014\004\uff3a\011" +
    "\uff3a\044\uff3a\045\uff3a\047\uff3a\001\002\000\006\004\345" +
    "\011\ufff0\001\002\000\004\011\346\001\002\000\004\002" +
    "\ufffe\001\002\000\022\006\017\061\043\100\030\101\036" +
    "\110\075\112\021\113\053\115\044\001\002\000\004\007" +
    "\351\001\002\000\004\010\352\001\002\000\054\004\252" +
    "\006\017\021\035\022\040\023\024\024\056\025\042\027" +
    "\041\030\031\033\016\034\014\037\046\043\051\046\015" +
    "\061\043\100\030\101\036\110\033\112\021\113\053\115" +
    "\044\001\002\000\004\011\354\001\002\000\014\004\uff86" +
    "\011\uff86\044\uff86\045\uff86\047\uff86\001\002\000\022\006" +
    "\017\061\043\100\030\101\036\110\075\112\021\113\053" +
    "\115\044\001\002\000\020\004\uff81\007\uff81\011\uff81\017" +
    "\uff81\044\uff81\045\uff81\047\uff81\001\002\000\012\007\362" +
    "\057\207\060\206\062\205\001\002\000\004\007\361\001" +
    "\002\000\020\004\uff80\007\uff80\011\uff80\017\uff80\044\uff80" +
    "\045\uff80\047\uff80\001\002\000\010\057\365\060\364\062" +
    "\363\001\002\000\020\006\376\100\030\101\036\110\075" +
    "\112\021\113\053\115\044\001\002\000\020\006\372\100" +
    "\030\101\036\110\075\112\021\113\053\115\044\001\002" +
    "\000\020\006\366\100\030\101\036\110\075\112\021\113" +
    "\053\115\044\001\002\000\016\100\030\101\036\110\075" +
    "\112\021\113\053\115\044\001\002\000\020\004\uff7f\007" +
    "\uff7f\011\uff7f\017\uff7f\044\uff7f\045\uff7f\047\uff7f\001\002" +
    "\000\004\007\371\001\002\000\020\004\uff7c\007\uff7c\011" +
    "\uff7c\017\uff7c\044\uff7c\045\uff7c\047\uff7c\001\002\000\016" +
    "\100\030\101\036\110\075\112\021\113\053\115\044\001" +
    "\002\000\020\004\uff7e\007\uff7e\011\uff7e\017\uff7e\044\uff7e" +
    "\045\uff7e\047\uff7e\001\002\000\004\007\375\001\002\000" +
    "\020\004\uff7b\007\uff7b\011\uff7b\017\uff7b\044\uff7b\045\uff7b" +
    "\047\uff7b\001\002\000\016\100\030\101\036\110\075\112" +
    "\021\113\053\115\044\001\002\000\020\004\uff7d\007\uff7d" +
    "\011\uff7d\017\uff7d\044\uff7d\045\uff7d\047\uff7d\001\002\000" +
    "\004\007\u0101\001\002\000\020\004\uff7a\007\uff7a\011\uff7a" +
    "\017\uff7a\044\uff7a\045\uff7a\047\uff7a\001\002\000\006\017" +
    "\u0110\051\u0111\001\002\000\004\110\u0104\001\002\000\006" +
    "\017\u0105\051\u0106\001\002\000\014\004\uffe3\011\uffe3\044" +
    "\uffe3\045\uffe3\047\uffe3\001\002\000\006\110\u0109\112\u0107" +
    "\001\002\000\004\017\u010c\001\002\000\004\017\u010b\001" +
    "\002\000\006\017\u010a\052\071\001\002\000\014\004\uffe5" +
    "\011\uffe5\044\uffe5\045\uffe5\047\uffe5\001\002\000\014\004" +
    "\uffe4\011\uffe4\044\uffe4\045\uffe4\047\uffe4\001\002\000\034" +
    "\004\uffe6\006\017\011\uffe6\044\uffe6\045\uffe6\047\uffe6\061" +
    "\043\100\030\101\036\110\075\112\021\113\053\115\044" +
    "\001\002\000\004\017\u010e\001\002\000\004\110\101\001" +
    "\002\000\016\004\uff8a\007\uff8a\011\uff8a\044\uff8a\045\uff8a" +
    "\047\uff8a\001\002\000\014\004\uffdb\011\uffdb\044\uffdb\045" +
    "\uffdb\047\uffdb\001\002\000\006\110\u0114\112\u0112\001\002" +
    "\000\004\017\u0117\001\002\000\004\017\u0116\001\002\000" +
    "\006\017\u0115\052\071\001\002\000\014\004\uffdd\011\uffdd" +
    "\044\uffdd\045\uffdd\047\uffdd\001\002\000\014\004\uffdc\011" +
    "\uffdc\044\uffdc\045\uffdc\047\uffdc\001\002\000\014\004\uffde" +
    "\011\uffde\044\uffde\045\uffde\047\uffde\001\002\000\004\110" +
    "\u0158\001\002\000\006\021\u0146\110\u0145\001\002\000\006" +
    "\021\u0133\110\u0132\001\002\000\006\017\u0126\051\u0127\001" +
    "\002\000\004\110\u011d\001\002\000\006\017\u011e\051\u011f" +
    "\001\002\000\014\004\uffc3\011\uffc3\044\uffc3\045\uffc3\047" +
    "\uffc3\001\002\000\006\110\u0122\112\u0120\001\002\000\004" +
    "\017\u0125\001\002\000\004\017\u0124\001\002\000\006\017" +
    "\u0123\052\071\001\002\000\014\004\uffc5\011\uffc5\044\uffc5" +
    "\045\uffc5\047\uffc5\001\002\000\014\004\uffc4\011\uffc4\044" +
    "\uffc4\045\uffc4\047\uffc4\001\002\000\014\004\uffc6\011\uffc6" +
    "\044\uffc6\045\uffc6\047\uffc6\001\002\000\014\004\uffa9\011" +
    "\uffa9\044\uffa9\045\uffa9\047\uffa9\001\002\000\012\110\u012c" +
    "\112\u0128\113\u012a\115\u012b\001\002\000\004\017\u0131\001" +
    "\002\000\004\017\u0130\001\002\000\004\017\u012f\001\002" +
    "\000\004\017\u012e\001\002\000\006\017\u012d\052\071\001" +
    "\002\000\014\004\uffab\011\uffab\044\uffab\045\uffab\047\uffab" +
    "\001\002\000\014\004\uff8f\011\uff8f\044\uff8f\045\uff8f\047" +
    "\uff8f\001\002\000\014\004\uffac\011\uffac\044\uffac\045\uffac" +
    "\047\uffac\001\002\000\014\004\uffaa\011\uffaa\044\uffaa\045" +
    "\uffaa\047\uffaa\001\002\000\014\004\uffad\011\uffad\044\uffad" +
    "\045\uffad\047\uffad\001\002\000\006\017\u013d\051\u013e\001" +
    "\002\000\004\110\u0134\001\002\000\006\017\u0135\051\u0136" +
    "\001\002\000\014\004\uffbb\011\uffbb\044\uffbb\045\uffbb\047" +
    "\uffbb\001\002\000\006\110\u0139\112\u0137\001\002\000\004" +
    "\017\u013c\001\002\000\004\017\u013b\001\002\000\006\017" +
    "\u013a\052\071\001\002\000\014\004\uffbd\011\uffbd\044\uffbd" +
    "\045\uffbd\047\uffbd\001\002\000\014\004\uffbc\011\uffbc\044" +
    "\uffbc\045\uffbc\047\uffbc\001\002\000\014\004\uffbe\011\uffbe" +
    "\044\uffbe\045\uffbe\047\uffbe\001\002\000\014\004\uffb3\011" +
    "\uffb3\044\uffb3\045\uffb3\047\uffb3\001\002\000\006\110\u0141" +
    "\112\u013f\001\002\000\004\017\u0144\001\002\000\004\017" +
    "\u0143\001\002\000\006\017\u0142\052\071\001\002\000\014" +
    "\004\uffb5\011\uffb5\044\uffb5\045\uffb5\047\uffb5\001\002\000" +
    "\014\004\uffb4\011\uffb4\044\uffb4\045\uffb4\047\uffb4\001\002" +
    "\000\014\004\uffb6\011\uffb6\044\uffb6\045\uffb6\047\uffb6\001" +
    "\002\000\006\017\u0150\051\u0151\001\002\000\004\110\u0147" +
    "\001\002\000\006\017\u0148\051\u0149\001\002\000\014\004" +
    "\uffbf\011\uffbf\044\uffbf\045\uffbf\047\uffbf\001\002\000\006" +
    "\110\u014c\112\u014a\001\002\000\004\017\u014f\001\002\000" +
    "\004\017\u014e\001\002\000\006\017\u014d\052\071\001\002" +
    "\000\014\004\uffc1\011\uffc1\044\uffc1\045\uffc1\047\uffc1\001" +
    "\002\000\014\004\uffc0\011\uffc0\044\uffc0\045\uffc0\047\uffc0" +
    "\001\002\000\014\004\uffc2\011\uffc2\044\uffc2\045\uffc2\047" +
    "\uffc2\001\002\000\014\004\uffb7\011\uffb7\044\uffb7\045\uffb7" +
    "\047\uffb7\001\002\000\006\110\u0154\112\u0152\001\002\000" +
    "\004\017\u0157\001\002\000\004\017\u0156\001\002\000\006" +
    "\017\u0155\052\071\001\002\000\014\004\uffb9\011\uffb9\044" +
    "\uffb9\045\uffb9\047\uffb9\001\002\000\014\004\uffb8\011\uffb8" +
    "\044\uffb8\045\uffb8\047\uffb8\001\002\000\014\004\uffba\011" +
    "\uffba\044\uffba\045\uffba\047\uffba\001\002\000\006\017\u0159" +
    "\051\u015a\001\002\000\014\004\uff91\011\uff91\044\uff91\045" +
    "\uff91\047\uff91\001\002\000\006\110\u015c\115\u015b\001\002" +
    "\000\004\017\u015e\001\002\000\004\017\u015d\001\002\000" +
    "\014\004\uff92\011\uff92\044\uff92\045\uff92\047\uff92\001\002" +
    "\000\014\004\uff93\011\uff93\044\uff93\045\uff93\047\uff93\001" +
    "\002\000\006\017\u0160\051\u0161\001\002\000\014\004\uffa4" +
    "\011\uffa4\044\uffa4\045\uffa4\047\uffa4\001\002\000\010\110" +
    "\u0165\112\u0162\113\u0164\001\002\000\004\017\u0169\001\002" +
    "\000\004\017\u0168\001\002\000\004\017\u0167\001\002\000" +
    "\006\017\u0166\052\071\001\002\000\014\004\uffa6\011\uffa6" +
    "\044\uffa6\045\uffa6\047\uffa6\001\002\000\014\004\uffa7\011" +
    "\uffa7\044\uffa7\045\uffa7\047\uffa7\001\002\000\014\004\uffa5" +
    "\011\uffa5\044\uffa5\045\uffa5\047\uffa5\001\002\000\014\004" +
    "\uffa8\011\uffa8\044\uffa8\045\uffa8\047\uffa8\001\002\000\022" +
    "\004\uff1b\011\uff1b\014\u016c\017\u016b\044\uff1b\045\uff1b\047" +
    "\uff1b\051\u016d\001\002\000\014\004\uffeb\011\uffeb\044\uffeb" +
    "\045\uffeb\047\uffeb\001\002\000\004\021\u0178\001\002\000" +
    "\006\110\u0170\112\u016e\001\002\000\004\017\u0173\001\002" +
    "\000\004\017\u0172\001\002\000\006\017\u0171\052\071\001" +
    "\002\000\014\004\uffed\011\uffed\044\uffed\045\uffed\047\uffed" +
    "\001\002\000\014\004\uffec\011\uffec\044\uffec\045\uffec\047" +
    "\uffec\001\002\000\034\004\uffee\006\017\011\uffee\044\uffee" +
    "\045\uffee\047\uffee\061\043\100\030\101\036\110\075\112" +
    "\021\113\053\115\044\001\002\000\004\017\u0175\001\002" +
    "\000\004\110\101\001\002\000\016\004\uff8b\007\uff8b\011" +
    "\uff8b\044\uff8b\045\uff8b\047\uff8b\001\002\000\014\004\uff1a" +
    "\011\uff1a\044\uff1a\045\uff1a\047\uff1a\001\002\000\004\110" +
    "\u0179\001\002\000\016\004\uff1b\011\uff1b\014\u016c\044\uff1b" +
    "\045\uff1b\047\uff1b\001\002\000\022\006\017\061\043\100" +
    "\030\101\036\110\075\112\021\113\053\115\044\001\002" +
    "\000\004\112\u017c\001\002\000\004\017\u017d\001\002\000" +
    "\022\006\017\061\043\100\030\101\036\110\075\112\021" +
    "\113\053\115\044\001\002\000\004\017\u017f\001\002\000" +
    "\004\110\101\001\002\000\016\004\uff88\007\uff88\011\uff88" +
    "\044\uff88\045\uff88\047\uff88\001\002\000\004\017\u0182\001" +
    "\002\000\004\110\101\001\002\000\016\004\uff87\007\uff87" +
    "\011\uff87\044\uff87\045\uff87\047\uff87\001\002\000\004\110" +
    "\u01c4\001\002\000\006\021\u01b2\110\u01b1\001\002\000\006" +
    "\021\u019f\110\u019e\001\002\000\006\017\u0192\051\u0193\001" +
    "\002\000\004\110\u0189\001\002\000\006\017\u018a\051\u018b" +
    "\001\002\000\014\004\uffd7\011\uffd7\044\uffd7\045\uffd7\047" +
    "\uffd7\001\002\000\006\110\u018e\112\u018c\001\002\000\004" +
    "\017\u0191\001\002\000\004\017\u0190\001\002\000\006\017" +
    "\u018f\052\071\001\002\000\014\004\uffd9\011\uffd9\044\uffd9" +
    "\045\uffd9\047\uffd9\001\002\000\014\004\uffd8\011\uffd8\044" +
    "\uffd8\045\uffd8\047\uffd8\001\002\000\014\004\uffda\011\uffda" +
    "\044\uffda\045\uffda\047\uffda\001\002\000\014\004\uffae\011" +
    "\uffae\044\uffae\045\uffae\047\uffae\001\002\000\012\110\u0198" +
    "\112\u0194\113\u0197\115\u0196\001\002\000\004\017\u019d\001" +
    "\002\000\004\017\u019c\001\002\000\004\017\u019b\001\002" +
    "\000\004\017\u019a\001\002\000\006\017\u0199\052\071\001" +
    "\002\000\014\004\uffb0\011\uffb0\044\uffb0\045\uffb0\047\uffb0" +
    "\001\002\000\014\004\uffb1\011\uffb1\044\uffb1\045\uffb1\047" +
    "\uffb1\001\002\000\014\004\uff90\011\uff90\044\uff90\045\uff90" +
    "\047\uff90\001\002\000\014\004\uffaf\011\uffaf\044\uffaf\045" +
    "\uffaf\047\uffaf\001\002\000\014\004\uffb2\011\uffb2\044\uffb2" +
    "\045\uffb2\047\uffb2\001\002\000\006\017\u01a9\051\u01aa\001" +
    "\002\000\004\110\u01a0\001\002\000\006\017\u01a1\051\u01a2" +
    "\001\002\000\014\004\uffcf\011\uffcf\044\uffcf\045\uffcf\047" +
    "\uffcf\001\002\000\006\110\u01a5\112\u01a3\001\002\000\004" +
    "\017\u01a8\001\002\000\004\017\u01a7\001\002\000\006\017" +
    "\u01a6\052\071\001\002\000\014\004\uffd1\011\uffd1\044\uffd1" +
    "\045\uffd1\047\uffd1\001\002\000\014\004\uffd0\011\uffd0\044" +
    "\uffd0\045\uffd0\047\uffd0\001\002\000\014\004\uffd2\011\uffd2" +
    "\044\uffd2\045\uffd2\047\uffd2\001\002\000\014\004\uffc7\011" +
    "\uffc7\044\uffc7\045\uffc7\047\uffc7\001\002\000\006\110\u01ad" +
    "\112\u01ab\001\002\000\004\017\u01b0\001\002\000\004\017" +
    "\u01af\001\002\000\006\017\u01ae\052\071\001\002\000\014" +
    "\004\uffc9\011\uffc9\044\uffc9\045\uffc9\047\uffc9\001\002\000" +
    "\014\004\uffc8\011\uffc8\044\uffc8\045\uffc8\047\uffc8\001\002" +
    "\000\014\004\uffca\011\uffca\044\uffca\045\uffca\047\uffca\001" +
    "\002\000\006\017\u01bc\051\u01bd\001\002\000\004\110\u01b3" +
    "\001\002\000\006\017\u01b4\051\u01b5\001\002\000\014\004" +
    "\uffd3\011\uffd3\044\uffd3\045\uffd3\047\uffd3\001\002\000\006" +
    "\110\u01b8\112\u01b6\001\002\000\004\017\u01bb\001\002\000" +
    "\004\017\u01ba\001\002\000\006\017\u01b9\052\071\001\002" +
    "\000\014\004\uffd5\011\uffd5\044\uffd5\045\uffd5\047\uffd5\001" +
    "\002\000\014\004\uffd4\011\uffd4\044\uffd4\045\uffd4\047\uffd4" +
    "\001\002\000\014\004\uffd6\011\uffd6\044\uffd6\045\uffd6\047" +
    "\uffd6\001\002\000\014\004\uffcb\011\uffcb\044\uffcb\045\uffcb" +
    "\047\uffcb\001\002\000\006\110\u01c0\112\u01be\001\002\000" +
    "\004\017\u01c3\001\002\000\004\017\u01c2\001\002\000\006" +
    "\017\u01c1\052\071\001\002\000\014\004\uffcd\011\uffcd\044" +
    "\uffcd\045\uffcd\047\uffcd\001\002\000\014\004\uffcc\011\uffcc" +
    "\044\uffcc\045\uffcc\047\uffcc\001\002\000\014\004\uffce\011" +
    "\uffce\044\uffce\045\uffce\047\uffce\001\002\000\006\017\u01c5" +
    "\051\u01c6\001\002\000\014\004\uff94\011\uff94\044\uff94\045" +
    "\uff94\047\uff94\001\002\000\006\110\u01c8\115\u01c7\001\002" +
    "\000\004\017\u01ca\001\002\000\004\017\u01c9\001\002\000" +
    "\014\004\uff95\011\uff95\044\uff95\045\uff95\047\uff95\001\002" +
    "\000\014\004\uff96\011\uff96\044\uff96\045\uff96\047\uff96\001" +
    "\002\000\004\002\001\001\002\000\006\017\u01cd\051\u01ce" +
    "\001\002\000\014\004\uff9a\011\uff9a\044\uff9a\045\uff9a\047" +
    "\uff9a\001\002\000\010\110\u01d2\112\u01cf\113\u01d1\001\002" +
    "\000\004\017\u01d6\001\002\000\004\017\u01d5\001\002\000" +
    "\004\017\u01d4\001\002\000\006\017\u01d3\052\071\001\002" +
    "\000\014\004\uff9c\011\uff9c\044\uff9c\045\uff9c\047\uff9c\001" +
    "\002\000\014\004\uff9d\011\uff9d\044\uff9d\045\uff9d\047\uff9d" +
    "\001\002\000\014\004\uff9b\011\uff9b\044\uff9b\045\uff9b\047" +
    "\uff9b\001\002\000\014\004\uff9e\011\uff9e\044\uff9e\045\uff9e" +
    "\047\uff9e\001\002\000\006\110\u01ed\113\u01ec\001\002\000" +
    "\010\110\u01eb\112\u01e9\113\u01ea\001\002\000\010\110\u01e8" +
    "\112\u01e6\113\u01e7\001\002\000\010\110\u01e5\112\u01e3\113" +
    "\u01e4\001\002\000\010\110\u01e2\112\u01e0\113\u01e1\001\002" +
    "\000\010\110\u01df\112\u01dd\113\u01de\001\002\000\026\004" +
    "\uff64\007\uff64\011\uff64\017\uff64\044\uff64\045\uff64\047\uff64" +
    "\057\uff64\060\uff64\062\uff64\001\002\000\026\004\uff4c\007" +
    "\uff4c\011\uff4c\017\uff4c\044\uff4c\045\uff4c\047\uff4c\057\uff4c" +
    "\060\uff4c\062\uff4c\001\002\000\026\004\uff6f\007\uff6f\011" +
    "\uff6f\017\uff6f\044\uff6f\045\uff6f\047\uff6f\057\uff6f\060\uff6f" +
    "\062\uff6f\001\002\000\026\004\uff61\007\uff61\011\uff61\017" +
    "\uff61\044\uff61\045\uff61\047\uff61\057\uff61\060\uff61\062\uff61" +
    "\001\002\000\026\004\uff49\007\uff49\011\uff49\017\uff49\044" +
    "\uff49\045\uff49\047\uff49\057\uff49\060\uff49\062\uff49\001\002" +
    "\000\026\004\uff6c\007\uff6c\011\uff6c\017\uff6c\044\uff6c\045" +
    "\uff6c\047\uff6c\057\uff6c\060\uff6c\062\uff6c\001\002\000\026" +
    "\004\uff60\007\uff60\011\uff60\017\uff60\044\uff60\045\uff60\047" +
    "\uff60\057\uff60\060\uff60\062\uff60\001\002\000\026\004\uff48" +
    "\007\uff48\011\uff48\017\uff48\044\uff48\045\uff48\047\uff48\057" +
    "\uff48\060\uff48\062\uff48\001\002\000\026\004\uff6b\007\uff6b" +
    "\011\uff6b\017\uff6b\044\uff6b\045\uff6b\047\uff6b\057\uff6b\060" +
    "\uff6b\062\uff6b\001\002\000\026\004\uff63\007\uff63\011\uff63" +
    "\017\uff63\044\uff63\045\uff63\047\uff63\057\uff63\060\uff63\062" +
    "\uff63\001\002\000\026\004\uff4b\007\uff4b\011\uff4b\017\uff4b" +
    "\044\uff4b\045\uff4b\047\uff4b\057\uff4b\060\uff4b\062\uff4b\001" +
    "\002\000\026\004\uff6e\007\uff6e\011\uff6e\017\uff6e\044\uff6e" +
    "\045\uff6e\047\uff6e\057\uff6e\060\uff6e\062\uff6e\001\002\000" +
    "\026\004\uff62\007\uff62\011\uff62\017\uff62\044\uff62\045\uff62" +
    "\047\uff62\057\uff62\060\uff62\062\uff62\001\002\000\026\004" +
    "\uff4a\007\uff4a\011\uff4a\017\uff4a\044\uff4a\045\uff4a\047\uff4a" +
    "\057\uff4a\060\uff4a\062\uff4a\001\002\000\026\004\uff6d\007" +
    "\uff6d\011\uff6d\017\uff6d\044\uff6d\045\uff6d\047\uff6d\057\uff6d" +
    "\060\uff6d\062\uff6d\001\002\000\026\004\uff4d\007\uff4d\011" +
    "\uff4d\017\uff4d\044\uff4d\045\uff4d\047\uff4d\057\uff4d\060\uff4d" +
    "\062\uff4d\001\002\000\026\004\uff70\007\uff70\011\uff70\017" +
    "\uff70\044\uff70\045\uff70\047\uff70\057\uff70\060\uff70\062\uff70" +
    "\001\002\000\004\007\362\001\002\000\006\017\u01f0\051" +
    "\u01f1\001\002\000\014\004\uff97\011\uff97\044\uff97\045\uff97" +
    "\047\uff97\001\002\000\006\110\u01f3\115\u01f2\001\002\000" +
    "\004\017\u01f5\001\002\000\004\017\u01f4\001\002\000\014" +
    "\004\uff98\011\uff98\044\uff98\045\uff98\047\uff98\001\002\000" +
    "\014\004\uff99\011\uff99\044\uff99\045\uff99\047\uff99\001\002" +
    "\000\012\021\u01fb\024\u01f8\025\u01f9\110\u01fa\001\002\000" +
    "\004\007\u020a\001\002\000\004\021\u0205\001\002\000\004" +
    "\021\u0200\001\002\000\006\017\u017a\051\u017b\001\002\000" +
    "\004\110\u01fc\001\002\000\004\051\u01fd\001\002\000\004" +
    "\112\u01fe\001\002\000\004\017\u01ff\001\002\000\022\006" +
    "\017\061\043\100\030\101\036\110\075\112\021\113\053" +
    "\115\044\001\002\000\004\110\u0201\001\002\000\004\051" +
    "\u0202\001\002\000\004\112\u0203\001\002\000\004\017\u0204" +
    "\001\002\000\022\006\017\061\043\100\030\101\036\110" +
    "\075\112\021\113\053\115\044\001\002\000\004\110\u0206" +
    "\001\002\000\004\051\u0207\001\002\000\004\112\u0208\001" +
    "\002\000\004\017\u0209\001\002\000\022\006\017\061\043" +
    "\100\030\101\036\110\075\112\021\113\053\115\044\001" +
    "\002\000\004\010\u020b\001\002\000\054\004\252\006\017" +
    "\021\035\022\040\023\024\024\056\025\042\027\041\030" +
    "\031\033\016\034\014\037\046\043\051\046\015\061\043" +
    "\100\030\101\036\110\033\112\021\113\053\115\044\001" +
    "\002\000\004\011\u020d\001\002\000\014\004\uff8c\011\uff8c" +
    "\044\uff8c\045\uff8c\047\uff8c\001\002\000\004\051\u020f\001" +
    "\002\000\006\110\u0211\114\u0210\001\002\000\004\017\u0213" +
    "\001\002\000\004\017\u0212\001\002\000\014\004\uff8d\011" +
    "\uff8d\044\uff8d\045\uff8d\047\uff8d\001\002\000\014\004\uff8e" +
    "\011\uff8e\044\uff8e\045\uff8e\047\uff8e\001\002\000\004\007" +
    "\u0215\001\002\000\004\010\u0216\001\002\000\054\004\u0218" +
    "\006\017\021\035\022\040\023\024\024\056\025\042\027" +
    "\041\030\031\033\016\034\014\037\046\043\051\046\015" +
    "\061\043\100\030\101\036\110\033\112\021\113\053\115" +
    "\044\001\002\000\004\011\u021c\001\002\000\054\004\252" +
    "\006\017\021\035\022\040\023\024\024\056\025\042\027" +
    "\041\030\031\033\016\034\014\037\046\043\051\046\015" +
    "\061\043\100\030\101\036\110\033\112\021\113\053\115" +
    "\044\001\002\000\006\004\u021a\011\ufff0\001\002\000\004" +
    "\011\u021b\001\002\000\004\002\ufffd\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u021a\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\024\004\025\005\026\007\053\010\033\011\036\012\021" +
    "\013\044\014\054\015\051\016\046\017\017\022\031\024" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u01ed\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\051\016\355\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\343\004\025\005\026\007" +
    "\053\010\033\011\036\012\021\013\044\014\054\015\051" +
    "\016\046\017\017\022\031\024\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\051\016\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\220\001\001\000\004\015\214\001\001\000" +
    "\004\015\210\001\001\000\004\015\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\250\004\025\005\026\007\053\010\033\011\036\012" +
    "\021\013\044\014\054\015\051\016\046\017\017\022\031" +
    "\024\022\001\001\000\004\023\254\001\001\000\036\003" +
    "\252\004\025\005\026\007\053\010\033\011\036\012\021" +
    "\013\044\014\054\015\051\016\046\017\017\022\031\024" +
    "\022\001\001\000\002\001\001\000\004\023\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\257\004" +
    "\025\005\026\007\053\010\033\011\036\012\021\013\044" +
    "\014\054\015\051\016\046\017\017\022\031\024\022\001" +
    "\001\000\004\023\261\001\001\000\004\023\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\264\004" +
    "\025\005\026\007\053\010\033\011\036\012\021\013\044" +
    "\014\054\015\051\016\046\017\017\022\031\024\022\001" +
    "\001\000\004\023\266\001\001\000\004\023\267\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\271\004" +
    "\025\005\026\007\053\010\033\011\036\012\021\013\044" +
    "\014\054\015\051\016\046\017\017\022\031\024\022\001" +
    "\001\000\004\023\273\001\001\000\004\023\274\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\276\004" +
    "\025\005\026\007\053\010\033\011\036\012\021\013\044" +
    "\014\054\015\051\016\046\017\017\022\031\024\022\001" +
    "\001\000\004\023\300\001\001\000\004\023\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\303\004" +
    "\025\005\026\007\053\010\033\011\036\012\021\013\044" +
    "\014\054\015\051\016\046\017\017\022\031\024\022\001" +
    "\001\000\004\023\305\001\001\000\004\023\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\310\004" +
    "\025\005\026\007\053\010\033\011\036\012\021\013\044" +
    "\014\054\015\051\016\046\017\017\022\031\024\022\001" +
    "\001\000\004\023\311\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\315\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\321\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\325\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\331\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\335\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\341\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\051\016\347\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\352\004" +
    "\025\005\026\007\053\010\033\011\036\012\021\013\044" +
    "\014\054\015\051\016\046\017\017\022\031\024\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\356" +
    "\016\357\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\376\001\001\000\004\015\372\001\001\000\004\015" +
    "\366\001\001\000\004\015\367\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\373\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\377\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u0107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\051\016" +
    "\u010c\001\001\000\002\001\001\000\004\021\u010e\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u0112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u0120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\u0128" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\u0137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u013f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u014a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\u0152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u0162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\u0176\001\001\000\004\021\u016e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\051\016\u0173\001\001\000" +
    "\002\001\001\000\004\021\u0175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\051\016\u0180\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\051\016\u017d\001\001\000\002\001" +
    "\001\000\004\021\u017f\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\u0182\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u018c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\u0194" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\u01a3\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u01ab\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u01b6\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\u01be\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u01cf\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\u01f6\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\051\016\u0173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\051\016\u010c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\051" +
    "\016\075\001\001\000\002\001\001\000\036\003\u020b\004" +
    "\025\005\026\007\053\010\033\011\036\012\021\013\044" +
    "\014\054\015\051\016\046\017\017\022\031\024\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\u0216\004\025\005\026\007\053\010" +
    "\033\011\036\012\021\013\044\014\054\015\051\016\046" +
    "\017\017\022\031\024\022\001\001\000\002\001\001\000" +
    "\036\003\u0218\004\025\005\026\007\053\010\033\011\036" +
    "\012\021\013\044\014\054\015\051\016\046\017\017\022" +
    "\031\024\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintax$actions {
  private final sintax parser;

  /** Constructor */
  CUP$sintax$actions(sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintax$do_action(
    int                        CUP$sintax$act_num,
    java_cup.runtime.lr_parser CUP$sintax$parser,
    java.util.Stack            CUP$sintax$stack,
    int                        CUP$sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintax$result;

      /* select the action based on the action number */
      switch (CUP$sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // SENTENCIA_PARAMETROS ::= Int Identificador Coma SENTENCIA_PARAMETROS 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARAMETROS",18, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // SENTENCIA_PARAMETROS ::= Int Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PARAMETROS",18, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // SENTENCIA_CASE ::= Default Dos_puntos SENTENCIA SENTENCIA_CASE Linea 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // SENTENCIA_CASE ::= Case False Dos_puntos SENTENCIA SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // SENTENCIA_CASE ::= Case True Dos_puntos SENTENCIA SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // SENTENCIA_CASE ::= Case Str Dos_puntos SENTENCIA SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // SENTENCIA_CASE ::= Case Ch Dos_puntos SENTENCIA SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // SENTENCIA_CASE ::= Case Real Dos_puntos SENTENCIA SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // SENTENCIA_CASE ::= Case Numero Dos_puntos SENTENCIA SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // SENTENCIA_CASE ::= Case False Dos_puntos SENTENCIA Break SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // SENTENCIA_CASE ::= Case True Dos_puntos SENTENCIA Break SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // SENTENCIA_CASE ::= Case Str Dos_puntos SENTENCIA Break SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // SENTENCIA_CASE ::= Case Ch Dos_puntos SENTENCIA Break SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // SENTENCIA_CASE ::= Case Real Dos_puntos SENTENCIA Break SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // SENTENCIA_CASE ::= Case Numero Dos_puntos SENTENCIA Break SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // SENTENCIA_CASE ::= Case False Dos_puntos SENTENCIA Break 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // SENTENCIA_CASE ::= Case True Dos_puntos SENTENCIA Break 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // SENTENCIA_CASE ::= Case Str Dos_puntos SENTENCIA Break 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // SENTENCIA_CASE ::= Case Ch Dos_puntos SENTENCIA Break 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // SENTENCIA_CASE ::= Case Real Dos_puntos SENTENCIA Break 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // SENTENCIA_CASE ::= Case Numero Dos_puntos SENTENCIA Break 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // SENTENCIA_CASE ::= Case False Dos_puntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // SENTENCIA_CASE ::= Case True Dos_puntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // SENTENCIA_CASE ::= Case Str Dos_puntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // SENTENCIA_CASE ::= Case Ch Dos_puntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // SENTENCIA_CASE ::= Case Real Dos_puntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // SENTENCIA_CASE ::= Case Numero Dos_puntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // SENTENCIA_SWITCH ::= Switch Parentesis_a False Parentesis_c Llave_a SENTENCIA_CASE Llave_c 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // SENTENCIA_SWITCH ::= Switch Parentesis_a True Parentesis_c Llave_a SENTENCIA_CASE Llave_c 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // SENTENCIA_SWITCH ::= Switch Parentesis_a Str Parentesis_c Llave_a SENTENCIA_CASE Llave_c 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // SENTENCIA_SWITCH ::= Switch Parentesis_a Ch Parentesis_c Llave_a SENTENCIA_CASE Llave_c 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // SENTENCIA_SWITCH ::= Switch Parentesis_a Real Parentesis_c Llave_a SENTENCIA_CASE Llave_c 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // SENTENCIA_SWITCH ::= Switch Parentesis_a Numero Parentesis_c Llave_a SENTENCIA_CASE Llave_c 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // SENTENCIA_SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA_CASE Llave_c 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",16, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // BOOL ::= Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // BOOL ::= Ch 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // BOOL ::= Real 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // BOOL ::= Numero 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // BOOL ::= False 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // BOOL ::= True 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // BOOL ::= Real Mayor_o_igual Numero 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // BOOL ::= Real Menor_o_igual Numero 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // BOOL ::= Real Mayor_que Numero 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // BOOL ::= Real Menor_que Numero 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // BOOL ::= Real Diferente_que Numero 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // BOOL ::= Real Igual_que Numero 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // BOOL ::= Numero Mayor_o_igual Real 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // BOOL ::= Numero Menor_o_igual Real 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // BOOL ::= Numero Mayor_que Real 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // BOOL ::= Numero Menor_que Real 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // BOOL ::= Numero Diferente_que Real 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // BOOL ::= Numero Igual_que Real 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // BOOL ::= Real Mayor_o_igual Real 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // BOOL ::= Real Menor_o_igual Real 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // BOOL ::= Real Mayor_que Real 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // BOOL ::= Real Menor_que Real 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // BOOL ::= Real Diferente_que Real 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // BOOL ::= Real Igual_que Real 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // BOOL ::= Real Mayor_o_igual Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // BOOL ::= Real Menor_o_igual Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // BOOL ::= Real Mayor_que Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // BOOL ::= Real Menor_que Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // BOOL ::= Real Diferente_que Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // BOOL ::= Real Igual_que Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // BOOL ::= Identificador Mayor_o_igual Real 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // BOOL ::= Identificador Menor_o_igual Real 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // BOOL ::= Identificador Mayor_que Real 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // BOOL ::= Identificador Menor_que Real 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // BOOL ::= Identificador Diferente_que Real 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // BOOL ::= Identificador Igual_que Real 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // BOOL ::= Numero Mayor_o_igual Numero 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // BOOL ::= Numero Menor_o_igual Numero 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // BOOL ::= Numero Mayor_que Numero 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // BOOL ::= Numero Menor_que Numero 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // BOOL ::= Numero Diferente_que Numero 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // BOOL ::= Identificador Mayor_o_igual Numero 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // BOOL ::= Identificador Menor_o_igual Numero 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // BOOL ::= Identificador Mayor_que Numero 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // BOOL ::= Identificador Menor_que Numero 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // BOOL ::= Identificador Diferente_que Numero 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // BOOL ::= Identificador Igual_que Numero 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // BOOL ::= Numero Mayor_o_igual Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // BOOL ::= Numero Menor_o_igual Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // BOOL ::= Numero Mayor_que Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // BOOL ::= Numero Menor_que Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // BOOL ::= Numero Diferente_que Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // BOOL ::= Numero Igual_que Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // BOOL ::= Identificador Mayor_o_igual Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // BOOL ::= Identificador Menor_o_igual Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // BOOL ::= Identificador Mayor_que Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // BOOL ::= Identificador Menor_que Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // BOOL ::= Identificador Diferente_que Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // BOOL ::= Identificador Igual_que Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SENTENCIA_BOOLEANA ::= BOOL Op_xor Parentesis_a BOOL Parentesis_c 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SENTENCIA_BOOLEANA ::= BOOL Op_o Parentesis_a BOOL Parentesis_c 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SENTENCIA_BOOLEANA ::= BOOL Op_y Parentesis_a BOOL Parentesis_c 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SENTENCIA_BOOLEANA ::= Parentesis_a BOOL Parentesis_c Op_xor Parentesis_a BOOL Parentesis_c 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SENTENCIA_BOOLEANA ::= Parentesis_a BOOL Parentesis_c Op_o Parentesis_a BOOL Parentesis_c 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SENTENCIA_BOOLEANA ::= Parentesis_a BOOL Parentesis_c Op_y Parentesis_a BOOL Parentesis_c 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SENTENCIA_BOOLEANA ::= Parentesis_a BOOL Parentesis_c Op_xor BOOL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SENTENCIA_BOOLEANA ::= Parentesis_a BOOL Parentesis_c Op_o BOOL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SENTENCIA_BOOLEANA ::= Parentesis_a BOOL Parentesis_c Op_y BOOL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SENTENCIA_BOOLEANA ::= Op_negacion Parentesis_a SENTENCIA_BOOLEANA Parentesis_c 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SENTENCIA_BOOLEANA ::= Op_negacion SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SENTENCIA_BOOLEANA ::= BOOL Op_xor BOOL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SENTENCIA_BOOLEANA ::= BOOL Op_o BOOL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SENTENCIA_BOOLEANA ::= BOOL Op_y BOOL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ARITMETICA ::= Identificador Suma Identificador 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICA",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA_FOR ::= Identificador Punto_coma SENTENCIA_BOOLEANA Punto_coma ARITMETICA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCIA_FOR ::= Identificador Igual Numero Punto_coma SENTENCIA_BOOLEANA Punto_coma ARITMETICA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCIA_FOR ::= Long Int Identificador Igual Numero Punto_coma SENTENCIA_BOOLEANA Punto_coma ARITMETICA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-8)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCIA_FOR ::= Short Int Identificador Igual Numero Punto_coma SENTENCIA_BOOLEANA Punto_coma ARITMETICA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-8)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCIA_FOR ::= Int Identificador Igual Numero Punto_coma SENTENCIA_BOOLEANA Punto_coma ARITMETICA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("FOR",10, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECLARACION ::= string Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DECLARACION ::= string Identificador Igual Str Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DECLARACION ::= Unsi Identificador Igual Ch Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DECLARACION ::= Signed Identificador Igual Ch Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DECLARACION ::= Unsi Char Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECLARACION ::= Unsi Char Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLARACION ::= Unsi Char Identificador Igual Ch Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARACION ::= Signed Char Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECLARACION ::= Signed Char Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECLARACION ::= Signed Char Identificador Igual Ch Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECLARACION ::= Char Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECLARACION ::= Char Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DECLARACION ::= Char Identificador Igual Ch Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DECLARACION ::= Float Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DECLARACION ::= Float Identificador Igual ARITMETICA Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DECLARACION ::= Float Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLARACION ::= Float Identificador Igual Real Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECLARACION ::= Float Identificador Igual Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARACION ::= Long Double Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECLARACION ::= Long Double Identificador Igual ARITMETICA Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECLARACION ::= Long Double Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECLARACION ::= Long Double Identificador Igual Real Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLARACION ::= Long Double Identificador Igual Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLARACION ::= Double Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLARACION ::= Double Identificador Igual ARITMETICA Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARACION ::= Double Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION ::= Double Identificador Igual Real Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION ::= Double Identificador Igual Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARACION ::= Unsi Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION ::= Unsi Identificador Igual ARITMETICA Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION ::= Unsi Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION ::= Unsi Identificador Igual Real Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION ::= Unsi Identificador Igual Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION ::= Signed Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION ::= Signed Identificador Igual ARITMETICA Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= Signed Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= Signed Identificador Igual Real Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= Signed Identificador Igual Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= Unsi Short Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= Unsi Short Identificador Igual ARITMETICA Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= Unsi Short Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= Unsi Short Identificador Igual Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= Unsi Long Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= Unsi Long Identificador Igual ARITMETICA Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= Unsi Long Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= Unsi Long Identificador Igual Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= Unsi Short Int Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= Unsi Short Int Identificador Igual ARITMETICA Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= Unsi Short Int Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= Unsi Short Int Identificador Igual Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= Unsi Long Int Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= Unsi Long Int Identificador Igual ARITMETICA Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= Unsi Long Int Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Unsi Long Int Identificador Igual Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Unsi Int Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Unsi Int Identificador Igual ARITMETICA Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Unsi Int Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Unsi Int Identificador Igual Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Signed Short Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Signed Short Identificador Igual ARITMETICA Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Signed Short Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Signed Short Identificador Igual Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Signed Long Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Signed Long Identificador Igual ARITMETICA Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Signed Long Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Signed Long Identificador Igual Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Signed Short Int Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Signed Short Int Identificador Igual ARITMETICA Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Signed Short Int Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Signed Short Int Identificador Igual Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Signed Long Int Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Signed Long Int Identificador Igual ARITMETICA Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Signed Long Int Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Signed Long Int Identificador Igual Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Signed Int Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Signed Int Identificador Igual ARITMETICA Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Signed Int Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Signed Int Identificador Igual Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Short Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Short Identificador Igual ARITMETICA Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Short Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Short Identificador Igual Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Long Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Long Identificador Igual ARITMETICA Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Long Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Long Identificador Igual Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Short Int Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Short Int Identificador Igual ARITMETICA Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Short Int Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Short Int Identificador Igual Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Long Int Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Long Int Identificador Igual ARITMETICA Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Long Int Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Long Int Identificador Igual Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Int Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Int Identificador Igual ARITMETICA Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Int Identificador Igual Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Int Identificador Igual Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IMPORTAR ::= Numeral Include Menor_que Libreria Mayor_que Linea 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("IMPORTAR",14, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= Linea SENTENCIA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA_PARAMETROS 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA_SWITCH 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA_FOR 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= DECLARACION_STRUCT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a Linea SENTENCIA Linea Llave_c 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a Linea SENTENCIA Linea Llave_c 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-8)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintax$stack.elementAt(CUP$sintax$top-1)).value;
		RESULT = start_val;
              CUP$sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintax$parser.done_parsing();
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

